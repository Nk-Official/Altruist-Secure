{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue254;\red0\green0\blue0;
\red14\green110\blue109;\red15\green112\blue1;\red83\green83\blue83;\red144\green1\blue18;\red19\green120\blue72;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c0\c50196\c50196;\cssrgb\c0\c50196\c0;\cssrgb\c40000\c40000\c40000;\cssrgb\c63922\c8235\c8235;\cssrgb\c3529\c53333\c35294;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 Swift\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /**\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   * Read input from STDIN. Print your output to STDOUT \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   * Use readLine() to read input from STDIN\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   * use print to write your output to STDOUT\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 */\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 // Below is an example on how to take integer input and print it.\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 // var a = Int(readLine()!)!\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 // print(a)\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 let\cf4 \strokec4  \cf5 \strokec5 RC\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4   readLine()\cf7 \strokec7 !\cf4 \strokec4 .\cf5 \strokec5 split\cf4 \strokec4 (separator\cf7 \strokec7 :\cf4 \strokec4  \cf8 \strokec8 " "\cf4 \strokec4 )\cb1 \
\cf2 \cb3 \strokec2 let\cf4 \strokec4  numberOfRows \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Int\cf4 \strokec4 (\cf5 \strokec5 RC\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ])\cf7 \strokec7 !\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 let\cf4 \strokec4  numberOfcolumn \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Int\cf4 \strokec4 (\cf5 \strokec5 RC\cf4 \strokec4 [\cf9 \strokec9 1\cf4 \strokec4 ])\cf7 \strokec7 !\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 var\cf4 \strokec4  matrix \cf7 \strokec7 =\cf4 \strokec4  [[\cf5 \strokec5 Int\cf4 \strokec4 ]]()\cb1 \
\cf2 \cb3 \strokec2 for\cf4 \strokec4  _ \cf2 \strokec2 in\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ..<numberOfRows\{\cb1 \
\cb3   \cf2 \strokec2 let\cf4 \strokec4  rows \cf7 \strokec7 =\cf4 \strokec4  readLine()\cf7 \strokec7 !\cf4 \strokec4 .\cf5 \strokec5 split\cf4 \strokec4 (separator\cf7 \strokec7 :\cf4 \strokec4  \cf8 \strokec8 " "\cf4 \strokec4 ).\cf5 \strokec5 map\cf4 \strokec4 (\{\cf5 \strokec5 Int\cf4 \strokec4 ($\cf9 \strokec9 0\cf4 \strokec4 )\cf7 \strokec7 !\}\cf4 \strokec4 )\cb1 \
\cb3   matrix.\cf5 \strokec5 append\cf4 \strokec4 (rows)\cb1 \
\cb3 \}\cb1 \
\
\
\cf2 \cb3 \strokec2 func\cf4 \strokec4  checkRightSideCoderCity(index \cf7 \strokec7 :\cf4 \strokec4  (\cf5 \strokec5 Int\cf7 \strokec7 ,\cf5 \strokec5 Int\cf4 \strokec4 ))\cf7 \strokec7 ->Bool\{\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  (index\cf9 \strokec9 .1\cf4 \strokec4  < numberOfcolumn\cf7 \strokec7 -1\cf4 \strokec4 )\{\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  matrix[index\cf9 \strokec9 .0\cf4 \strokec4 ][index\cf9 \strokec9 .1\cf7 \strokec7 +1]\cf4 \strokec4  \cf7 \strokec7 ==\cf4 \strokec4  \cf9 \strokec9 1\cf4 \cb1 \strokec4 \
\cb3   \}\cb1 \
\cb3   \cf2 \strokec2 return\cf4 \strokec4  false\cb1 \
\cb3 \}\cb1 \
\cf2 \cb3 \strokec2 func\cf4 \strokec4  checkLeftSideCoderCity(index \cf7 \strokec7 :\cf4 \strokec4  (\cf5 \strokec5 Int\cf7 \strokec7 ,\cf5 \strokec5 Int\cf4 \strokec4 ))\cf7 \strokec7 ->Bool\{\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  index\cf9 \strokec9 .1\cf4 \strokec4  > \cf9 \strokec9 0\cf4 \strokec4 \{\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  matrix[index\cf9 \strokec9 .0\cf4 \strokec4 ][index\cf9 \strokec9 .1\cf7 \strokec7 -1]\cf4 \strokec4  \cf7 \strokec7 ==\cf4 \strokec4  \cf9 \strokec9 1\cf4 \cb1 \strokec4 \
\cb3   \}\cb1 \
\cb3   \cf2 \strokec2 return\cf4 \strokec4  false\cb1 \
\cb3 \}\cb1 \
\
\
\cf2 \cb3 \strokec2 func\cf4 \strokec4  checkUpSideCoderCity(index \cf7 \strokec7 :\cf4 \strokec4  (\cf5 \strokec5 Int\cf7 \strokec7 ,\cf5 \strokec5 Int\cf4 \strokec4 ))\cf7 \strokec7 ->Bool\{\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4   index\cf9 \strokec9 .0\cf4 \strokec4  > \cf9 \strokec9 0\cf4 \strokec4 \{\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  matrix[index\cf9 \strokec9 .0\cf7 \strokec7 -1][index\cf9 \strokec9 .1\cf4 \strokec4 ] \cf7 \strokec7 ==\cf4 \strokec4  \cf9 \strokec9 1\cf4 \cb1 \strokec4 \
\cb3   \}\cb1 \
\cb3   \cf2 \strokec2 return\cf4 \strokec4  false\cb1 \
\cb3 \}\cb1 \
\cf2 \cb3 \strokec2 func\cf4 \strokec4  checkdownSideCoderCity(index \cf7 \strokec7 :\cf4 \strokec4  (\cf5 \strokec5 Int\cf7 \strokec7 ,\cf5 \strokec5 Int\cf4 \strokec4 ))\cf7 \strokec7 ->Bool\{\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4   index\cf9 \strokec9 .0\cf4 \strokec4  < numberOfRows\cf7 \strokec7 -1\{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  matrix[index\cf9 \strokec9 .0\cf7 \strokec7 +1][index\cf9 \strokec9 .1\cf4 \strokec4 ] \cf7 \strokec7 ==\cf4 \strokec4  \cf9 \strokec9 1\cf4 \cb1 \strokec4 \
\cb3   \}\cb1 \
\cb3   \cf2 \strokec2 return\cf4 \strokec4  false\cb1 \
\cb3 \}\cb1 \
\
\
\cf2 \cb3 \strokec2 func\cf4 \strokec4  checkdiagonalTopRightSideCoderCity(index \cf7 \strokec7 :\cf4 \strokec4  (\cf5 \strokec5 Int\cf7 \strokec7 ,\cf5 \strokec5 Int\cf4 \strokec4 ))\cf7 \strokec7 ->Bool\{\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4   index\cf9 \strokec9 .0\cf4 \strokec4  > \cf9 \strokec9 0\cf4 \strokec4  \cf7 \strokec7 ,\cf4 \strokec4  index\cf9 \strokec9 .1\cf4 \strokec4  < numberOfcolumn \cf7 \strokec7 -\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 \{\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  matrix[index\cf9 \strokec9 .0\cf7 \strokec7 -1][index\cf9 \strokec9 .1\cf7 \strokec7 +1]\cf4 \strokec4  \cf7 \strokec7 ==\cf4 \strokec4  \cf9 \strokec9 1\cf4 \cb1 \strokec4 \
\cb3   \}\cb1 \
\cb3   \cf2 \strokec2 return\cf4 \strokec4  false\cb1 \
\cb3 \}\cb1 \
\cf2 \cb3 \strokec2 func\cf4 \strokec4  checkdiagonalTopLeftSideCoderCity(index \cf7 \strokec7 :\cf4 \strokec4  (\cf5 \strokec5 Int\cf7 \strokec7 ,\cf5 \strokec5 Int\cf4 \strokec4 ))\cf7 \strokec7 ->Bool\{\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4   index\cf9 \strokec9 .0\cf4 \strokec4  > \cf9 \strokec9 0\cf4 \strokec4  \cf7 \strokec7 ,\cf4 \strokec4  index\cf9 \strokec9 .1\cf4 \strokec4  > \cf9 \strokec9 0\cf4 \strokec4 \{\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  matrix[index\cf9 \strokec9 .0\cf7 \strokec7 -1][index\cf9 \strokec9 .1\cf7 \strokec7 -1]\cf4 \strokec4  \cf7 \strokec7 ==\cf4 \strokec4  \cf9 \strokec9 1\cf4 \cb1 \strokec4 \
\cb3   \}\cb1 \
\cb3   \cf2 \strokec2 return\cf4 \strokec4  false\cb1 \
\cb3 \}\cb1 \
\
\
\cf2 \cb3 \strokec2 func\cf4 \strokec4  checkdiagonalBottomRightSideCoderCity(index \cf7 \strokec7 :\cf4 \strokec4  (\cf5 \strokec5 Int\cf7 \strokec7 ,\cf5 \strokec5 Int\cf4 \strokec4 ))\cf7 \strokec7 ->Bool\{\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4   index\cf9 \strokec9 .0\cf4 \strokec4  < numberOfRows \cf7 \strokec7 -\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4  \cf7 \strokec7 ,\cf4 \strokec4  index\cf9 \strokec9 .1\cf4 \strokec4  < numberOfcolumn \cf7 \strokec7 -\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 \{\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  matrix[index\cf9 \strokec9 .0\cf7 \strokec7 +1][index\cf9 \strokec9 .1\cf7 \strokec7 +1]\cf4 \strokec4  \cf7 \strokec7 ==\cf4 \strokec4  \cf9 \strokec9 1\cf4 \cb1 \strokec4 \
\cb3   \}\cb1 \
\cb3   \cf2 \strokec2 return\cf4 \strokec4  false\cb1 \
\cb3 \}\cb1 \
\cf2 \cb3 \strokec2 func\cf4 \strokec4  checkdiagonalBottomLeftSideCoderCity(index \cf7 \strokec7 :\cf4 \strokec4  (\cf5 \strokec5 Int\cf7 \strokec7 ,\cf5 \strokec5 Int\cf4 \strokec4 ))\cf7 \strokec7 ->Bool\{\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4   index\cf9 \strokec9 .0\cf4 \strokec4  > numberOfRows \cf7 \strokec7 -\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4  \cf7 \strokec7 ,\cf4 \strokec4  index\cf9 \strokec9 .1\cf4 \strokec4  > \cf9 \strokec9 0\cf4 \strokec4 \{\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  matrix[index\cf9 \strokec9 .0\cf7 \strokec7 +1][index\cf9 \strokec9 .1\cf7 \strokec7 -1]\cf4 \strokec4  \cf7 \strokec7 ==\cf4 \strokec4  \cf9 \strokec9 1\cf4 \cb1 \strokec4 \
\cb3   \}\cb1 \
\cb3   \cf2 \strokec2 return\cf4 \strokec4  false\cb1 \
\cb3 \}\cb1 \
\
\
\
\
\cf2 \cb3 \strokec2 var\cf4 \strokec4  belts \cf7 \strokec7 =\cf4 \strokec4  [[\cf5 \strokec5 Int\cf4 \strokec4 ]]()\cb1 \
\
\cf2 \cb3 \strokec2 let\cf4 \strokec4  index \cf7 \strokec7 =\cf4 \strokec4  (\cf9 \strokec9 2\cf7 \strokec7 ,\cf9 \strokec9 2\cf4 \strokec4 )\cb1 \
\cf2 \cb3 \strokec2 let\cf4 \strokec4  res \cf7 \strokec7 =\cf4 \strokec4  checkRightSideCoderCity(index\cf7 \strokec7 :\cf4 \strokec4  index)\cb1 \
\cf2 \cb3 \strokec2 let\cf4 \strokec4  \cf2 \strokec2 left\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  checkLeftSideCoderCity(index\cf7 \strokec7 :\cf4 \strokec4  index)\cb1 \
\cf2 \cb3 \strokec2 let\cf4 \strokec4  \cf5 \strokec5 TRight\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  checkdiagonalTopRightSideCoderCity(index\cf7 \strokec7 :\cf4 \strokec4  index)\cb1 \
\cf2 \cb3 \strokec2 let\cf4 \strokec4  \cf5 \strokec5 DTLeft\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  checkdiagonalTopLeftSideCoderCity(index\cf7 \strokec7 :\cf4 \strokec4  index)\cb1 \
\cf2 \cb3 \strokec2 let\cf4 \strokec4  \cf5 \strokec5 DBRight\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  checkdiagonalBottomRightSideCoderCity(index\cf7 \strokec7 :\cf4 \strokec4  index)\cb1 \
\cf2 \cb3 \strokec2 let\cf4 \strokec4  \cf5 \strokec5 DBLetf\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  checkdiagonalBottomLeftSideCoderCity(index\cf7 \strokec7 :\cf4 \strokec4  index)\cb1 \
\cb3 print(res\cf7 \strokec7 ,\cf2 \strokec2 left\cf7 \strokec7 ,\cf5 \strokec5 TRight\cf7 \strokec7 ,\cf5 \strokec5 DTLeft\cf7 \strokec7 ,\cf5 \strokec5 DBRight\cf7 \strokec7 ,\cf5 \strokec5 DBLetf\cf4 \strokec4 )\cb1 \
\
\cb3 false false false true true false\cb1 \
\
\
\
\
\
\
\
\
\
}